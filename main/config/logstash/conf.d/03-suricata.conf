input { file {
    path => "/var/log/suricata/eve.json"
    sincedb_path => "/var/log/.ids_sincedb"
    codec =>  json
    type => "Netflow"
  }

}

filter {
  if [type] == "Netflow" {
    #mutate{
    #            remove_field => [ "MY_TYPE" ]
    #    }
    #date {
    #  match => [ "timestamp", "ISO8601" ]
    #}
    #  mutate {
    #          copy => { "timestamp" => "new_date" }
    #   }

    if [event_type] == "fileinfo" {
      ruby {
        code => "if event['event_type'] == 'fileinfo'; event['fileinfo']['type']=event['fileinfo']['magic'].to_s.split(',')[0]; end;"
      }
    }
    # I recommend renaming the fields below to be consistent with other log sources.  This makes it easy to "pivot" between logs

    if [src_ip]  {
    geoip {
      source => "src_ip"
      target => "geoip"
      #database => "/opt/logstash/vendor/geoip/GeoLiteCity.dat"
      add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
      add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}"  ]
    }
    mutate {
      convert => [ "[geoip][coordinates]", "float" ]
    }
    if ![geoip.ip] {
      if [dest_ip]  {
        geoip {
          source => "dest_ip"
          target => "geoip"
          #database => "/opt/logstash/vendor/geoip/GeoLiteCity.dat"
          add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
          add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}"  ]
        }
        mutate {
          convert => [ "[geoip][coordinates]", "float" ]
        }
      }
    }
 }
    mutate {
      rename => {
        "src_ip" => "source_ip"
        "dest_ip" => "destination_ip"
        "src_port" => "source_port"
        "dest_port" => "destination_port"
      }
    }
    # This will translate the alert.severity field into a severity field of either High, Medium, or Low
    if [event_type] == "alert" {
      if [alert][severity] == 1 {
        mutate {
          add_field => { "severity" => "High" }
        }
      }
      if [alert][severity] == 2 {
        mutate {
          add_field => { "severity" => "Medium" }
        }
      }
      if [alert][severity] == 3 {
        mutate {
          add_field => { "severity" => "Low" }
        }
      }
      # If the alert is a Snort GPL alert break it apart for easier reading and categorization
      if [alert][signature] =~ "GPL " {
        # This will parse out the category type from the alert
        grok {
          match => { "[alert][signature]" => "GPL\s+%{DATA:category}\s" }
        }
        # This will store the category
        mutate {
          add_field => { "rule_type" => "Snort GPL" }
          lowercase => [ "category" ]
        }
      }
      # If the alert is an Emerging Threat alert break it apart for easier reading and categorization
      if [alert][signature] =~ "ET " {
        # This will parse out the category type from the alert
        grok {
          match => { "[alert][signature]" => "ET\s+%{DATA:category}\s" }
        }
        # This will store the category
        mutate {
          add_field => { "rule_type" => "Emerging Threats" }
          lowercase => [ "category" ]
        }
      }
      # This section adds URLs to lookup information about a rule online
      if [rule_type] == "Snort GPL" {
        mutate {
          add_field => [ "Signature_Info", "https://www.snort.org/search?query=%{[alert][gid]}-%{[alert][signature_id]}" ]
        }
      }
      if [rule_type] == "Emerging Threats" {
        mutate {
          add_field => [ "Signature_Info", "http://doc.emergingthreats.net/%{[alert][signature_id]}" ]
        }
      }
    }
  }
  if [type] == "Netflow" {
    if "_grokparsefailure" not in [tags] and "_csvparsefailure" not in [tags] and "_jsonparsefailure" not in [tags] {
    #  mutate {

    #    remove_field => [ "message" ]
    #  }
    }
  }

}

output{
        if [type] == "Netflow" {
                elasticsearch{
                        user => "elastic"
                        password => "secret"
                        hosts => "http://localhost:9200"
                        index => "netflow-%{+YYYY.MM.dd}"
                }
        }

}
output {
        if [type] == "Netflow" {
                file {
			gzip => true
                        path => "/var/log/ctms_backend/Netflow-%{+YYYY.MM.dd}.zip"
                }

        }

}
